from gec_common.gecclass import *
import logging
import re
import jsons
import time
from datetime import date, datetime, timedelta
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC 
from deep_translator import GoogleTranslator
from selenium import webdriver
from selenium.webdriver.common.by import By
import gec_common.OutputJSON
import functions as fn
from functions import ET
import gec_common.Doc_Download

NOTICE_DUPLICATE_COUNT = 0
MAX_NOTICES_DUPLICATE = 4
MAX_NOTICES = 2000
notice_count = 0
SCRIPT_NAME = "de_had_ca"
Doc_Download = gec_common.Doc_Download.Doc_Download(SCRIPT_NAME)
output_json_file = gec_common.OutputJSON.OutputJSON(SCRIPT_NAME)
previous_scraping_log_check = fn.previous_scraping_log_check(SCRIPT_NAME)
output_json_folder = "jsonfile"



# Note : url is not changeble and that's why  url reference not mentioned in "on site comment"


#how to explore CA details :       1) go to url 
#                                  2) select "Advanced search" option       (left side) 
#                                  3) in the scroll bar select "Supplies/services/works and results of design contests" , click on submit button


# ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# There are 3 formats for ca  :   format 1) 
#                           	  - Contracted awarded (construction work)

#                                 format 2)
#                           	  - Awarded order (delivery/service)
			
#                          	      format 3)
#                          	      - Contract award notices - Sectors
#                          	      - Announcement of awarded contracts
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def extract_and_save_notice(tender_html_element):
    global notice_count
    global notice_data
    notice_data = tender()
    
    # Onsite Field -None
    # Onsite Comment -None
    notice_data.script_name = 'de_had_ca'
    
    # Onsite Field -None
    # Onsite Comment -None
    notice_data.main_language = 'DE'
    
    # Onsite Field -None
    # Onsite Comment -None
    performance_country_data = performance_country()
    performance_country_data.performance_country = 'DE'
    notice_data.performance_country.append(performance_country_data)
    
    # Onsite Field -None
    # Onsite Comment -None
    notice_data.currency = 'EUR'
    
    # Onsite Field -None
    # Onsite Comment -None
    notice_data.procurement_method = 2
    
    # Onsite Field -None
    # Onsite Comment -None
    notice_data.notice_type = 7
    
    # Onsite Field -None
    # Onsite Comment -None

    try:
        notice_data.notice_no = tender_html_element.find_element(By.CSS_SELECTOR, 'form > table > tbody').text
    except Exception as e:
        logging.info("Exception in notice_no: {}".format(type(e).__name__))
        pass
    
    # Onsite Field -d)Auftragsgegenstand:
    # Onsite Comment -split the folllowing data from this field,  ( for format 1 and 2)

    try:
        notice_data.local_title = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftragsgegenstand")]').text
        notice_data.notice_title = GoogleTranslator(source='auto', target='en').translate(notice_data.local_title)
    except Exception as e:
        logging.info("Exception in local_title: {}".format(type(e).__name__))
        pass
    
    # Onsite Field -II.1.1)Bezeichnung des Auftrags
    # Onsite Comment -split the folllowing data from this field,  (for format 3)

    try:
        notice_data.local_title = page_main.find_element(By.XPATH, '//*[contains(text(),"Bezeichnung des Auftrags")]').text
        notice_data.notice_title = GoogleTranslator(source='auto', target='en').translate(notice_data.local_title)
    except Exception as e:
        logging.info("Exception in local_title: {}".format(type(e).__name__))
        pass
    
    try:
        notice_data.local_description = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftragsgegenstand")]').text
    except Exception as e:
        logging.info("Exception in local_description: {}".format(type(e).__name__))
        pass
    
    try:
        notice_data.local_description = page_main.find_element(By.XPATH, '//*[contains(text(),"Kurze Beschreibung")]').text
    except Exception as e:
        logging.info("Exception in local_description: {}".format(type(e).__name__))
        pass
    
     # Onsite Field -veröffentlicht am/ Ablauftermin
    # Onsite Comment -this selector is "publish date" of all notice types, publication date and notice_deadline are both mention in same column, upper date is the publication date

    try:
        publish_date = tender_html_element.find_element(By.CSS_SELECTOR, "tr > td:nth-child(3)").text
        publish_date = re.findall('\d+/\d+/\d{4}',publish_date)[0]
        notice_data.publish_date = datetime.strptime(publish_date,'%d/%m/%Y').strftime('%Y/%m/%d %H:%M:%S')
        logging.info(notice_data.publish_date)
    except Exception as e:
        logging.info("Exception in publish_date: {}".format(type(e).__name__)) 
        pass

    if notice_data.publish_date is not None and notice_data.publish_date < threshold:
        return
    
    # Onsite Field -None
    # Onsite Comment -None
    notice_data.main_language = 'DE'
    
    # Onsite Field -None
    # Onsite Comment -None
    performance_country_data = performance_country()
    performance_country_data.performance_country = 'DE'
    notice_data.performance_country.append(performance_country_data)
    
    # Onsite Field -d)Auftragsgegenstand:
    # Onsite Comment -split the folllowing data from this field,  ( for format 1 and 2)

    try:
        notice_data.notice_summary_english = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftragsgegenstand")]').text
    except Exception as e:
        logging.info("Exception in notice_summary_english: {}".format(type(e).__name__))
        pass
    
    # Onsite Field -II.1.4)Kurze Beschreibung
    # Onsite Comment -split the following data from this field, (for format 3)

    try:
        notice_data.notice_summary_english = page_main.find_element(By.XPATH, '//*[contains(text(),"Kurze Beschreibung")]').text
    except Exception as e:
        logging.info("Exception in notice_summary_english: {}".format(type(e).__name__))
        pass
    
    # Onsite Field -Verfahren Leistung
    # Onsite Comment -split the value from bracket ,, Replace following keywords with given respective keywords  ('constuction work = Works' , 'delivery/service = Services ') , (for all format)

    try:
        notice_data.notice_contract_type = tender_html_element.find_element(By.CSS_SELECTOR, 'tr > td:nth-child(2) > div').text
    except Exception as e:
        logging.info("Exception in notice_contract_type: {}".format(type(e).__name__))
        pass
    
    # Onsite Field -IV.1.1)Verfahrensart
    # Onsite Comment -split the following value from  this field , (format 3)

    try:
        notice_data.type_of_procedure_actual = page_main.find_element(By.XPATH, '//*[contains(text(),"Verfahrensart")]').text
    except Exception as e:
        logging.info("Exception in type_of_procedure_actual: {}".format(type(e).__name__))
        pass
    
    # Onsite Field -None
    # Onsite Comment -split only first text , dont take bracket value (for all format)

    try:
        notice_data.document_type_description = page_main.find_element(By.CSS_SELECTOR, 'td > h3').text
    except Exception as e:
        logging.info("Exception in document_type_description: {}".format(type(e).__name__))
        pass
    
    # Onsite Field -II.1.7)Gesamtwert der Beschaffung (ohne MwSt.)
    # Onsite Comment -split the following value from this field (for format 3)

    try:
        notice_data.est_amount = page_main.find_element(By.XPATH, '//*[contains(text(),"Gesamtwert der Beschaffung")]').text
    except Exception as e:
        logging.info("Exception in est_amount: {}".format(type(e).__name__))
        pass
    
    # Onsite Field -II.1.7)Gesamtwert der Beschaffung (ohne MwSt.)
    # Onsite Comment -split the following value from this field (format 3)

    try:
        notice_data.grossbudgetlc = page_main.find_element(By.XPATH, '//*[contains(text(),"Gesamtwert der Beschaffung")]').text
    except Exception as e:
        logging.info("Exception in grossbudgetlc: {}".format(type(e).__name__))
        pass
    
    # Onsite Field -Il.2.13)Angaben zu Mitteln der Europäischen Union
    # Onsite Comment -if in below text written as " financed by European Union funds: No  " than pass the "None " in field name "T.FUNDING_AGENCIES::TEXT	" "II.2.13) Information about European Union Funds  >  The procurement is related to a project and/or programme financed by European Union funds: No  " if the abve  text written as " financed by European Union funds: YES  " than pass the "Funding agency" name as "European Agency (internal id: 1344862) " in field name "T.FUNDING_AGENCIES::TEXT" (format 2)

    try:
        notice_data.funding_agencies = page_main.find_element(By.XPATH, '//*[contains(text(),"Europäischen Union")]').text
    except Exception as e:
        logging.info("Exception in funding_agencies: {}".format(type(e).__name__))
        pass
    
    # Onsite Field -HAD-Ref
    # Onsite Comment -the url will not change, it will pass into main page

    try:
        notice_data.notice_url = tender_html_element.find_element(By.CSS_SELECTOR, 'form > table > tbody > tr').get_attribute("href")                     
        fn.load_page(page_details,notice_data.notice_url,80)
        logging.info(notice_data.notice_url)
    except Exception as e:
        logging.info("Exception in notice_url: {}".format(type(e).__name__))
        notice_data.notice_url = url
    
    # Onsite Field -None
    # Onsite Comment -None
    try:
        notice_data.notice_text += page_main.find_element(By.CSS_SELECTOR, 'table:nth-child(2)').get_attribute("outerHTML")                     
    except Exception as e:
        logging.info("Exception in notice_text: {}".format(type(e).__name__))
        pass
    
# Onsite Field -Auftraggeber/Vergabestelle:
# Onsite Comment -None

    try:              
        for single_record in page_main.find_elements(By.CSS_SELECTOR, 'table:nth-child(2)'):
            customer_details_data = customer_details()
        # Onsite Field -"Auftraggeber/Vergabestelle:"
        # Onsite Comment -you have to split only first line data from this field, (format 1)

            try:
                customer_details_data.org_name = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle")]').text
            except Exception as e:
                logging.info("Exception in org_name: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -I.1)Name und Adressen
        # Onsite Comment -split the foloowing data from this field, (format 3)

            try:
                customer_details_data.org_name = page_main.find_element(By.XPATH, 'tr:nth-child(9)').text
            except Exception as e:
                logging.info("Exception in org_name: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Offizielle Bezeichnung:
        # Onsite Comment -split the following data from this field, (format 2)

            try:
                customer_details_data.org_name = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber (Vergabestelle) / Beschaffungsstelle:")]').text
            except Exception as e:
                logging.info("Exception in org_name: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -"Straße:" , "Stadt/Ort:"  , "Land"
        # Onsite Comment -split the following data from this field,  split the data between "Official designation" and "Contact point(s)" field,   (format 1)

            try:
                customer_details_data.org_address = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle")]').text
            except Exception as e:
                logging.info("Exception in org_address: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -"Straße:" , "Stadt/Ort:"  , "Land"
        # Onsite Comment -split the following data from this field,  split the data between "Official designation" and "Attn. from" field,   (format 2)

            try:
                customer_details_data.org_address = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber (Vergabestelle) / Beschaffungsstelle")]').text
            except Exception as e:
                logging.info("Exception in org_address: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -None
        # Onsite Comment -split the data between "org_name" and "NUTS code:" field,   (format 3)

            try:
                customer_details_data.org_address = page_main.find_element(By.CSS_SELECTOR, 'tr:nth-child(10)> td:nth-child(3)').text
            except Exception as e:
                logging.info("Exception in org_address: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Stadt/Ort:
        # Onsite Comment -split the  data between "street" and "country" field,  split only  text value (format 1)

            try:
                customer_details_data.org_city = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle")]').text
            except Exception as e:
                logging.info("Exception in org_city: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Stadt/Ort
        # Onsite Comment -split the  data between "street" and "country" field,  split only  text value (format 2)

            try:
                customer_details_data.org_city = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber (Vergabestelle) / Beschaffungsstelle")]').text
            except Exception as e:
                logging.info("Exception in org_city: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -I.1)Name und Adressen
        # Onsite Comment -split only  text value (format 3)

            try:
                customer_details_data.org_city = page_main.find_element(By.CSS_SELECTOR, 'tr:nth-child(11)> td:nth-child(3)').text
            except Exception as e:
                logging.info("Exception in org_city: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Land:
        # Onsite Comment -split the data between "Stadt/Ort" and "Kontaktstelle(n)" field,  (format 1)

            try:
                customer_details_data.org_country = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle")]').text
            except Exception as e:
                logging.info("Exception in org_country: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Land:
        # Onsite Comment -split the data between "Stadt/Ort" and "Zu Hdn. von" field,  (format 2)

            try:
                customer_details_data.org_country = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber (Vergabestelle) / Beschaffungsstelle")]').text
            except Exception as e:
                logging.info("Exception in org_country: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -I.1)name and addresses
        # Onsite Comment -(format 3)

            try:
                customer_details_data.org_country = page_main.find_element(By.CSS_SELECTOR, 'tr:nth-child(12) > td:nth-child(3)').text
            except Exception as e:
                logging.info("Exception in org_country: {}".format(type(e).__name__))
                pass
        
            customer_details_data.org_language = 'DE'
        # Onsite Field -e)Bundesland:
        # Onsite Comment -split the following data from this field, (format 1)

            try:
                customer_details_data.org_state = page_main.find_element(By.XPATH, '//*[contains(text(),"Bundesland:")]').text
            except Exception as e:
                logging.info("Exception in org_state: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Zu Hdn. von
        # Onsite Comment -split the following data from this field, (format 1)

            try:
                customer_details_data.contact_person = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle")]').text
            except Exception as e:
                logging.info("Exception in contact_person: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Zu Hdn. von
        # Onsite Comment -split the following data from this field, (format 2)

            try:
                customer_details_data.contact_person = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber (Vergabestelle) / Beschaffungsstelle")]').text
            except Exception as e:
                logging.info("Exception in contact_person: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Telefon
        # Onsite Comment -split the data between "Zu Hdn. von" and "Fax"  field,  get the following data from this field, (format 1)

            try:
                customer_details_data.org_phone = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle")]').text
            except Exception as e:
                logging.info("Exception in org_phone: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Telefon
        # Onsite Comment -split the data between "Zu Hdn. von" and "Fax"  field,  get the following data from this field, (format 2)

            try:
                customer_details_data.org_phone = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber (Vergabestelle) / Beschaffungsstelle")]').text
            except Exception as e:
                logging.info("Exception in org_phone: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Telefon
        # Onsite Comment -get the following data from this field, (format 3)

            try:
                customer_details_data.org_phone = page_main.find_element(By.XPATH, '//*[contains(text(),"Telefon")]').text
            except Exception as e:
                logging.info("Exception in org_phone: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Fax
        # Onsite Comment -split the data between "Telephone" and "E-Mail" field, (format 1)

            try:
                customer_details_data.org_fax = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle:")]').text
            except Exception as e:
                logging.info("Exception in org_fax: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Fax
        # Onsite Comment -split the data between "Telephone" and "E-Mail" field, (format 1)

            try:
                customer_details_data.org_fax = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle:")]').text
            except Exception as e:
                logging.info("Exception in org_fax: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Fax
        # Onsite Comment -split the data between "Telephone" and "E-Mail" field, (format 2)

            try:
                customer_details_data.org_fax = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber (Vergabestelle) / Beschaffungsstelle:")]').text
            except Exception as e:
                logging.info("Exception in org_fax: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Fax
        # Onsite Comment -split the data between "Telephone" and "E-Mail" field, (format 3)

            try:
                customer_details_data.org_fax = page_main.find_element(By.XPATH, '//*[contains(text(),"Fax")]').text
            except Exception as e:
                logging.info("Exception in org_fax: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -E-Mail
        # Onsite Comment -split the data between "Fax" and "digital address (URL):" field, (format 1)

            try:
                customer_details_data.org_email = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle:")]').text
            except Exception as e:
                logging.info("Exception in org_email: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -E-Mail
        # Onsite Comment -split the data between "Fax" and "digital address (URL):" field, (format 2)

            try:
                customer_details_data.org_email = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber (Vergabestelle) / Beschaffungsstelle:")]').text
            except Exception as e:
                logging.info("Exception in org_email: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -E-Mail
        # Onsite Comment -split the data between "Fax" and "Internet-Adresse(n)" field, (format 3)

            try:
                customer_details_data.org_email = page_main.find_element(By.XPATH, '//*[contains(text(),"E-Mail")]').text
            except Exception as e:
                logging.info("Exception in org_email: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -digitale Adresse(URL)
        # Onsite Comment -split the data between "Email" and "Vergebener Auftrag nach : §20 (3) VOB/A" field,  ( format 1)

            try:
                customer_details_data.org_website = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle:")]').text
            except Exception as e:
                logging.info("Exception in org_website: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -digitale Adresse(URL)
        # Onsite Comment -split the data between "Email" and "Vergebener Auftrag nach : §20 (3) VOB/A" field,  ( format 2)

            try:
                customer_details_data.org_website = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber (Vergabestelle) / Beschaffungsstelle:")]').text
            except Exception as e:
                logging.info("Exception in org_website: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Internet-Adresse(n)
        # Onsite Comment -split the below URL from field,  ( format 3)

            try:
                customer_details_data.org_website = page_main.find_element(By.XPATH, '//*[contains(text(),"Internet-Adresse(n)")]').text
            except Exception as e:
                logging.info("Exception in org_website: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Stadt/Ort:
        # Onsite Comment -split the data between "street" and "country" field, split only numeric (5 digit) value (format 1)

            try:
                customer_details_data.postal_code = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber/Vergabestelle")]').text
            except Exception as e:
                logging.info("Exception in postal_code: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Stadt/Ort:
        # Onsite Comment -split the data between "street" and "country" field, split only numeric (5 digit) value (format 2)

            try:
                customer_details_data.postal_code = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftraggeber (Vergabestelle) / Beschaffungsstelle")]').text
            except Exception as e:
                logging.info("Exception in postal_code: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -None
        # Onsite Comment -plit only numeric ( 5 digit ) value (format 3)

            try:
                customer_details_data.postal_code = page_main.find_element(By.CSS_SELECTOR, 'tr:nth-child(11)> td:nth-child(3)').text
            except Exception as e:
                logging.info("Exception in postal_code: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -NUTS-Code:
        # Onsite Comment -split the data from this field, (format 3)

            try:
                customer_details_data.customer_nuts = page_main.find_element(By.XPATH, '//*[contains(text(),"NUTS-Code:")]').text
            except Exception as e:
                logging.info("Exception in customer_nuts: {}".format(type(e).__name__))
                pass
        
            customer_details_data.customer_details_cleanup()
            notice_data.customer_details.append(customer_details_data)
    except Exception as e:
        logging.info("Exception in customer_details: {}".format(type(e).__name__)) 
        pass
    
# Onsite Field -Abschnitt II: Gegenstand
# Onsite Comment -None

    try:              
        for single_record in page_main.find_elements(By.CSS_SELECTOR, 'table:nth-child(2)'):
            cpvs_data = cpvs()
        # Onsite Field -II.1.2)CPV-Code Hauptteil:
        # Onsite Comment -split the data from this field, (format 3)

            try:
                cpvs_data.cpv_code = page_main.find_element(By.XPATH, '//*[contains(text(),"CPV-Code Hauptteil:")]//following::td[3]').text
            except Exception as e:
                logging.info("Exception in cpv_code: {}".format(type(e).__name__))
                pass
        
            cpvs_data.cpvs_cleanup()
            notice_data.cpvs.append(cpvs_data)
    except Exception as e:
        logging.info("Exception in cpvs: {}".format(type(e).__name__)) 
        pass
    
# Onsite Field -II.2.5)award criteria
# Onsite Comment -None

    try:              
        for single_record in page_main.find_elements(By.CSS_SELECTOR, 'table:nth-child(2)'):
            tender_criteria_data = tender_criteria()
        # Onsite Field -Kriterium
        # Onsite Comment -split the data from "Kriterium" subfield (format 3)

            try:
                tender_criteria_data.tender_criteria_title = page_main.find_element(By.XPATH, '//*[contains(text(),"Zuschlagskriterien")]//following::th[2]').text
            except Exception as e:
                logging.info("Exception in tender_criteria_title: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Gewichtung
        # Onsite Comment -split the data from "Gewichtung" subfield (format 3)

            try:
                tender_criteria_data.tender_criteria_weight = page_main.find_element(By.XPATH, '//*[contains(text(),"Zuschlagskriterien")]//following::th[3]').text
            except Exception as e:
                logging.info("Exception in tender_criteria_weight: {}".format(type(e).__name__))
                pass
        
            tender_criteria_data.tender_criteria_cleanup()
            notice_data.tender_criteria.append(tender_criteria_data)
    except Exception as e:
        logging.info("Exception in tender_criteria: {}".format(type(e).__name__)) 
        pass
    
# Onsite Field -None
# Onsite Comment -None

    try:              
        for single_record in page_main.find_elements(By.CSS_SELECTOR, 'table:nth-child(2)'):
            lot_details_data = lot_details()
        # Onsite Field -d)Auftragsgegenstand:
        # Onsite Comment -split the folllowing data from this field, ( for format 1 and 2)

            try:
                lot_details_data.lot_title = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftragsgegenstand")]').text
            except Exception as e:
                logging.info("Exception in lot_title: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Abschnitt V: Auftragsvergabe
        # Onsite Comment -split the folllowing data from "		Bezeichnung des Auftrags:" this subfield, ( for format 3)

            try:
                lot_details_data.lot_title = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftragsvergabe")]//following::td[6]').text
            except Exception as e:
                logging.info("Exception in lot_title: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -d)Auftragsgegenstand:
        # Onsite Comment -split the folllowing data from this field, ( for format 1 and 2)

            try:
                lot_details_data.lot_description = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftragsgegenstand")]').text
            except Exception as e:
                logging.info("Exception in lot_description: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Abschnitt V: Auftragsvergabe
        # Onsite Comment -split the folllowing data from " Bezeichnung des Auftrags:" this subfield, ( for format 3)

            try:
                lot_details_data.lot_description = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftragsvergabe")]//following::td[6]').text
            except Exception as e:
                logging.info("Exception in lot_description: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -II.1.7)Gesamtwert der Beschaffung (ohne MwSt.)
        # Onsite Comment -split the following value from this field (format 3)

            try:
                lot_details_data.lot_grossbudget_lc = page_main.find_element(By.XPATH, '//*[contains(text(),"Gesamtwert der Beschaffung")]').text
            except Exception as e:
                logging.info("Exception in lot_grossbudget_lc: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -Auftrags-Nr.
        # Onsite Comment -split the following value from this field (format 3)

            try:
                lot_details_data.lot_actual_number = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftragsvergabe")]//following::td[3]').text
            except Exception as e:
                logging.info("Exception in lot_actual_number: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -II.2.3)Erfüllungsort
        # Onsite Comment -split the following value from this field (format 3)

            try:
                lot_details_data.lot_nuts = page_main.find_element(By.XPATH, '//*[contains(text(),"Auftragsvergabe")]//following::td[3]').text
            except Exception as e:
                logging.info("Exception in lot_nuts: {}".format(type(e).__name__))
                pass
        
        # Onsite Field -None
        # Onsite Comment -( format 3)

            try:
                for single_record in page_main.find_elements(By.CSS_SELECTOR, 'table:nth-child(2)'):
                    lot_cpvs_data = lot_cpvs()
		
                    # Onsite Field -II.2.2)Weitere(r) CPV-Code(s)
                    # Onsite Comment -split the following data from this field ( format 3)

                    lot_cpvs_data.lot_cpv_code = page_main.find_element(By.CSS_SELECTOR, '//*[contains(text(),"Weitere(r) CPV-Code(s)")]').text
			
                    lot_cpvs_data.lot_cpvs_cleanup()
                    lot_details_data.lot_cpvs.append(lot_cpvs_data)
            except Exception as e:
                logging.info("Exception in lot_cpvs: {}".format(type(e).__name__))
                pass
			
        # Onsite Field -None
        # Onsite Comment -None

            try:
                for single_record in None.find_elements(By.CSS_SELECTOR, 'table:nth-child(2)'):
                    award_details_data = award_details()
		
                    # Onsite Field -f)Name des beauftragten Unternehmens:
                    # Onsite Comment -split the left (couma seperated) value from this field, (format 1)

                    award_details_data.bidder_name = None.find_element(By.XPATH, '//*[contains(text(),"beauftragten Unternehmens")]').text
			
                    # Onsite Field -f)Name des beauftragten Unternehmens:
                    # Onsite Comment -split the data first line data, (format 2)

                    award_details_data.bidder_name = None.find_element(By.XPATH, '//*[contains(text(),"beauftragten Unternehmens")]').text
			
                    # Onsite Field -f)Name des beauftragten Unternehmens:
                    # Onsite Comment -split the data from this field, (format 3)

                    award_details_data.bidder_name = None.find_element(By.XPATH, '//*[contains(text(),"Name und Anschrift des Wirtschaftsteilnehmers, zu dessen Gunsten der Zuschlag erteilt wurde")]//following::font[2]').text
			
                    # Onsite Field -Name des beauftragten Unternehmens:
                    # Onsite Comment -split the (couma seperated) second and third value data from this field, (format 1)

                    award_details_data.address = None.find_element(By.XPATH, '//*[contains(text(),"beauftragten Unternehmens")]').text
			
                    # Onsite Field -f)Name des beauftragten Unternehmens:
                    # Onsite Comment -split the second and third line value data from this field, (format 2)

                    award_details_data.address = None.find_element(By.XPATH, '//*[contains(text(),"beauftragten Unternehmens")]').text
			
                    # Onsite Field -Name und Anschrift des Wirtschaftsteilnehmers, zu dessen Gunsten der Zuschlag erteilt wurde
                    # Onsite Comment -split the data between "org_name" and "NUTS-Code"  (format 3)

                    award_details_data.address = None.find_element(By.XPATH, '//*[contains(text(),"Name und Anschrift des Wirtschaftsteilnehmers, zu dessen Gunsten der Zuschlag erteilt wurde")]//following::td[6]').text
			
                    # Onsite Field -V.2.4)Angaben zum Wert des Auftrags/Loses (ohne MwSt.)
                    # Onsite Comment -split the data from this field  (format 3)

                    award_details_data.grossawardvaluelc = None.find_element(By.XPATH, '//*[contains(text(),"Angaben zum Wert des Auftrags/Loses (ohne MwSt.)")]//following::td[3]').text
			
                    award_details_data.award_details_cleanup()
                    lot_details_data.award_details.append(award_details_data)
            except Exception as e:
                logging.info("Exception in award_details: {}".format(type(e).__name__))
                pass
			
            lot_details_data.lot_details_cleanup()
            notice_data.lot_details.append(lot_details_data)
    except Exception as e:
        logging.info("Exception in lot_details: {}".format(type(e).__name__)) 
        pass
    
    notice_data.identifier = str(notice_data.script_name) + str(notice_data.notice_no) + str(notice_data.publish_date) +  str(notice_data.notice_url) 
    duplicate_check_data = fn.duplicate_check_data_from_previous_scraping(SCRIPT_NAME,MAX_NOTICES_DUPLICATE,notice_data.identifier,previous_scraping_log_check)
    NOTICE_DUPLICATE_COUNT = duplicate_check_data[1]
    if duplicate_check_data[0] == False:
        return
    notice_data.tender_cleanup()
    output_json_file.writeNoticeToJSONFile(jsons.dump(notice_data))
    notice_count += 1
    logging.info('----------------------------------')
# ----------------------------------------- Main Body
arguments= ['--incognito','ignore-certificate-errors','allow-insecure-localhost','--start-maximized']
page_main = fn.init_chrome_driver(arguments) 
page_details = fn.init_chrome_driver(arguments) 
try:
    th = date.today() - timedelta(1)
    threshold = th.strftime('%Y/%m/%d')
    logging.info("Scraping from or greater than: " + threshold)
    urls = ["https://www.had.de/onlinesuche_erweitert.html"] 
    for url in urls:
        fn.load_page(page_main, url, 50)
        logging.info('----------------------------------')
        logging.info(url)
        for page_no in range(2,5):
            page_check = WebDriverWait(page_main, 50).until(EC.presence_of_element_located((By.XPATH,'//*[@id="innerframe"]/table[1]/tbody/tr'))).text
            rows = WebDriverWait(page_main, 60).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="innerframe"]/table[1]/tbody/tr')))
            length = len(rows)
            for records in range(0,length):
                tender_html_element = WebDriverWait(page_main, 60).until(EC.presence_of_all_elements_located((By.XPATH, '//*[@id="innerframe"]/table[1]/tbody/tr')))[records]
                extract_and_save_notice(tender_html_element)
                if notice_count >= MAX_NOTICES:
                    break
                
                if NOTICE_DUPLICATE_COUNT >= MAX_NOTICES_DUPLICATE:
                    logging.info("NOTICES_DUPLICATE::", MAX_NOTICES_DUPLICATE)
                    break

            if notice_data.publish_date is not None and notice_data.publish_date < threshold:
                break

            try:   
                next_page = WebDriverWait(page_main, 50).until(EC.element_to_be_clickable((By.LINK_TEXT,str(page_no))))
                page_main.execute_script("arguments[0].click();",next_page)
                logging.info("Next page")
                WebDriverWait(page_main, 50).until_not(EC.text_to_be_present_in_element((By.XPATH,'//*[@id="innerframe"]/table[1]/tbody/tr'),page_check))
            except Exception as e:
                logging.info("Exception in next_page: {}".format(type(e).__name__))
                logging.info("No next page")
                break
    logging.info("Finished processing. Scraped {} notices".format(notice_count))
except Exception as e:
    raise e
    logging.info("Exception:"+str(e))
finally:
    page_main.quit()
    page_details.quit() 
    
    output_json_file.copyFinalJSONToServer(output_json_folder)